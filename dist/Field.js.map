{"version":3,"sources":["../src/Field.js"],"names":["VALID_TYPES","Field","field","JSON","stringify","name","Array","isArray","type","indexOf","toLowerCase","title","Object","assign","prototype","toJSON","hasClass","cls"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAEA,IAAMA,WAAW,GAAG,CACnB,QADmB,EAEnB,MAFmB,EAGnB,QAHmB,EAInB,KAJmB,EAKnB,KALmB,EAMnB,OANmB,EAOnB,UAPmB,EAQnB,UARmB,EASnB,MATmB,EAUnB,OAVmB,EAWnB,MAXmB,EAYnB,MAZmB,EAanB,gBAbmB,EAcnB,QAdmB,EAenB,OAfmB,EAgBnB,OAhBmB,EAiBnB,UAjBmB,EAkBnB,OAlBmB,EAmBnB,MAnBmB,CAApB;;AAsBe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACpC,MAAIA,KAAK,YAAYD,KAArB,EAA4B;AAC3B,WAAOC,KAAP;AACA;;AACD,MAAI,EAAE,gBAAgBD,KAAlB,CAAJ,EAA8B;AAC7B,WAAO,IAAIA,KAAJ,CAAUC,KAAV,CAAP;AACA;;AAED,0BAAO,qBAAoBA,KAApB,CAAP,EAAkC,kCAAkCC,IAAI,CAACC,SAAL,CAAeF,KAAf,CAApE;AACA,0BAAO,aAAa,OAAOA,KAAK,CAACG,IAAjC,EAAuC,sCAAsCF,IAAI,CAACC,SAAL,CAAeF,KAAK,CAACG,IAArB,CAA7E;AACA,0BAAO,gBAAgB,OAAOH,KAAK,SAA5B,IAAsCI,KAAK,CAACC,OAAN,CAAcL,KAAK,SAAnB,CAA7C,EACC,oDAAoDC,IAAI,CAACC,SAAL,CAAeF,KAAK,SAApB,CADrD;AAEA,0BAAO,gBAAgB,OAAOA,KAAK,CAACM,IAA7B,IAAsC,aAAa,OAAON,KAAK,CAACM,IAA1B,IAAkCR,WAAW,CAACS,OAAZ,CAAoBP,KAAK,CAACM,IAAN,CAAWE,WAAX,EAApB,IAAgD,CAAC,CAAhI,EACC,oEAAoEP,IAAI,CAACC,SAAL,CAAeF,KAAK,CAACM,IAArB,CADrE;AAEA,0BAAO,gBAAgB,OAAON,KAAK,CAACS,KAA7B,IAAsC,aAAa,OAAOT,KAAK,CAACS,KAAvE,EACC,oDAAoDR,IAAI,CAACC,SAAL,CAAeF,KAAK,CAACS,KAArB,CADrD;AAGAC,EAAAA,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBX,KAApB;AACA;;AAEDD,KAAK,CAACa,SAAN,CAAgBC,MAAhB,GAAyB,YAAW;AACnC,SAAOH,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,IAAlB,CAAP;AACA,CAFD;;AAIAZ,KAAK,CAACa,SAAN,CAAgBE,QAAhB,GAA2B,UAASC,GAAT,EAAc;AACxC,SAAO,yBAAsBX,KAAtB,IAA+B,oBAAS,aAAT,EAAqBW,GAArB,CAAtC;AACA,CAFD","sourcesContent":["import assert from './assert';\nimport {contains} from './util';\n\nconst VALID_TYPES = [\n\t'hidden',\n\t'text',\n\t'search',\n\t'tel',\n\t'url',\n\t'email',\n\t'password',\n\t'datetime',\n\t'date',\n\t'month',\n\t'week',\n\t'time',\n\t'datetime-local',\n\t'number',\n\t'range',\n\t'color',\n\t'checkbox',\n\t'radio',\n\t'file'\n];\n\nexport default function Field(field) {\n\tif (field instanceof Field) {\n\t\treturn field;\n\t}\n\tif (!(this instanceof Field)) {\n\t\treturn new Field(field);\n\t}\n\n\tassert('object' === typeof field, 'field must be an object, got ' + JSON.stringify(field));\n\tassert('string' === typeof field.name, 'field.name must be a string, got ' + JSON.stringify(field.name));\n\tassert('undefined' === typeof field.class || Array.isArray(field.class),\n\t\t'field.class must be an array or undefined, got ' + JSON.stringify(field.class));\n\tassert('undefined' === typeof field.type || ('string' === typeof field.type && VALID_TYPES.indexOf(field.type.toLowerCase()) > -1),\n\t\t'field.type must be a valid field type string or undefined, got ' + JSON.stringify(field.type));\n\tassert('undefined' === typeof field.title || 'string' === typeof field.title,\n\t\t'field.title must be a string or undefined, got ' + JSON.stringify(field.title));\n\n\tObject.assign(this, field);\n}\n\nField.prototype.toJSON = function() {\n\treturn Object.assign({}, this);\n};\n\nField.prototype.hasClass = function(cls) {\n\treturn this.class instanceof Array && contains(this.class, cls);\n};\n"],"file":"Field.js"}