{"version":3,"sources":["../src/superagent.js"],"names":["parse","res","fn","Entity","text","setEncoding","on","chunk","err","body","e","flattenFields","fields","fieldsObj","forEach","field","hasOwnProperty","name","value","submitHelper","req","submit","Array","isArray","method","toUpperCase","query","send","perform","request","action","Action","toLowerCase","href","use","type"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;;;AAEO,SAASA,KAAT,CAAeC,GAAf,EAAoBC,EAApB,EAAwB;AAC9B,MAAI,aAAa,OAAOD,GAAxB,EAA6B;AAC5B,WAAO,IAAIE,iBAAJ,CAAWF,GAAX,CAAP;AACA;;AACDA,EAAAA,GAAG,CAACG,IAAJ,GAAW,EAAX;AACAH,EAAAA,GAAG,CAACI,WAAJ,CAAgB,MAAhB;AACAJ,EAAAA,GAAG,CAACK,EAAJ,CAAO,MAAP,EAAe,UAASC,KAAT,EAAgB;AAAEN,IAAAA,GAAG,CAACG,IAAJ,IAAYG,KAAZ;AAAoB,GAArD;AACAN,EAAAA,GAAG,CAACK,EAAJ,CAAO,KAAP,EAAc,YAAW;AACxB,QAAIE,GAAJ,EAASC,IAAT;;AACA,QAAI;AACHA,MAAAA,IAAI,GAAG,IAAIN,iBAAJ,CAAWF,GAAG,CAACG,IAAf,CAAP;AACA,KAFD,CAEE,OAAOM,CAAP,EAAU;AACXF,MAAAA,GAAG,GAAGE,CAAN;AACA,KAJD,SAIU;AACTR,MAAAA,EAAE,CAACM,GAAD,EAAMC,IAAN,CAAF;AACA;AACD,GATD;AAUA,C,CAED;AACA;;;AACA,SAASE,aAAT,CAAuBC,MAAvB,EAA+B;AAC9B,MAAMC,SAAS,GAAG,EAAlB;AACAD,EAAAA,MAAM,CAACE,OAAP,CAAe,UAASC,KAAT,EAAgB;AAC9B,QAAI,CAACH,MAAM,CAACI,cAAP,CAAsBD,KAAK,CAACE,IAA5B,CAAL,EAAwC;AACvCJ,MAAAA,SAAS,CAACE,KAAK,CAACE,IAAP,CAAT,GAAwBF,KAAK,CAACG,KAA9B;AACA;AACD,GAJD;AAKA,SAAOL,SAAP;AACA;;AAED,SAASM,YAAT,CAAsBC,GAAtB,EAA2B;AAC1BA,EAAAA,GAAG,CAACC,MAAJ,GAAa,SAASA,MAAT,CAAgBT,MAAhB,EAAwB;AACpC,QAAIU,KAAK,CAACC,OAAN,CAAcX,MAAd,CAAJ,EAA2B;AAC1BA,MAAAA,MAAM,GAAGD,aAAa,CAACC,MAAD,CAAtB;AACA;;AAED,YAAQ,KAAKY,MAAL,CAAYC,WAAZ,EAAR;AACC,WAAK,KAAL;AACA,WAAK,MAAL;AAAa;AACZ,iBAAO,KAAKC,KAAL,CAAWd,MAAX,CAAP;AACA;;AACD;AAAS;AACR,iBAAO,KAAKe,IAAL,CAAUf,MAAV,CAAP;AACA;AAPF;AASA,GAdD;AAeA;;AAEM,SAASgB,OAAT,CAAiBC,OAAjB,EAA0BC,MAA1B,EAAkC;AACxC,0BAAOD,OAAP;AACA,0BAAOC,MAAM,YAAYC,kBAAzB;AACA,SAAOF,OAAO,CAACC,MAAM,CAACN,MAAP,CAAcQ,WAAd,EAAD,CAAP,CAAqCF,MAAM,CAACG,IAA5C,EACLC,GADK,CACDf,YADC,EAELgB,IAFK,CAEAL,MAAM,CAACK,IAFP,EAGLd,MAHK,CAGES,MAAM,CAAClB,MAAP,IAAiB,EAHnB,CAAP;AAIA","sourcesContent":["import assert from './assert';\nimport Action from './Action';\nimport Entity from './index';\n\nexport function parse(res, fn) {\n\tif ('string' === typeof res) {\n\t\treturn new Entity(res);\n\t}\n\tres.text = '';\n\tres.setEncoding('utf8');\n\tres.on('data', function(chunk) { res.text += chunk; });\n\tres.on('end', function() {\n\t\tlet err, body;\n\t\ttry {\n\t\t\tbody = new Entity(res.text);\n\t\t} catch (e) {\n\t\t\terr = e;\n\t\t} finally {\n\t\t\tfn(err, body);\n\t\t}\n\t});\n}\n\n// Siren doesn't specify what to do if there are any fields with the same name\n// (ie. radio buttons). If this happens, the first such field in the list will be chosen\nfunction flattenFields(fields) {\n\tconst fieldsObj = {};\n\tfields.forEach(function(field) {\n\t\tif (!fields.hasOwnProperty(field.name)) {\n\t\t\tfieldsObj[field.name] = field.value;\n\t\t}\n\t});\n\treturn fieldsObj;\n}\n\nfunction submitHelper(req) {\n\treq.submit = function submit(fields) {\n\t\tif (Array.isArray(fields)) {\n\t\t\tfields = flattenFields(fields);\n\t\t}\n\n\t\tswitch (this.method.toUpperCase()) {\n\t\t\tcase 'GET':\n\t\t\tcase 'HEAD': {\n\t\t\t\treturn this.query(fields);\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\treturn this.send(fields);\n\t\t\t}\n\t\t}\n\t};\n}\n\nexport function perform(request, action) {\n\tassert(request);\n\tassert(action instanceof Action);\n\treturn request[action.method.toLowerCase()](action.href)\n\t\t.use(submitHelper)\n\t\t.type(action.type)\n\t\t.submit(action.fields || []);\n}\n"],"file":"superagent.js"}