{"version":3,"sources":["../src/chaiPlugin.js"],"names":["chai","utils","Assertion","addProperty","flag","multipleArgMethod","name","key","validTypes","addChainableMethod","desiredValues","Array","prototype","slice","call","arguments","isArray","_obj","forEach","desiredValue","obj","constuctor","assert","indexOf","found","some","Action","Entity","Field","Link","singleArgMethod","arrayProperty","subjectType","to","be","an","objectProperty"],"mappings":"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","sourcesContent":["import Action from './Action';\nimport Entity from './index';\nimport Field from './Field';\nimport Link from './Link';\n\nexport default function(chai, utils) {\n\tconst Assertion = chai.Assertion;\n\n\t// .all.\n\tAssertion.addProperty('all', /* @this */ function() {\n\t\tutils.flag(this, 'all', true);\n\t});\n\n\t// expect(resource).to.have.Xs(x1, x2, ...)\n\tfunction multipleArgMethod(name, key, validTypes) {\n\t\tAssertion.addChainableMethod(name, /* @this */ function() {\n\t\t\tconst desiredValues = Array.prototype.slice.call(arguments);\n\n\t\t\tif (Array.isArray(this._obj)) {\n\t\t\t\tif (utils.flag(this, 'all')) {\n\t\t\t\t\tdesiredValues.forEach(desiredValue => {\n\t\t\t\t\t\tthis._obj.forEach(obj => {\n\t\t\t\t\t\t\tnew Assertion(obj.constuctor in validTypes);\n\t\t\t\t\t\t\tthis.assert(\n\t\t\t\t\t\t\t\tArray.isArray(obj[key]) && obj[key].indexOf(desiredValue) > -1,\n\t\t\t\t\t\t\t\t'expected #{this} to have Siren ' + key + ' #{exp}',\n\t\t\t\t\t\t\t\t'expected #{this} to not have Siren ' + key + ' #{exp}',\n\t\t\t\t\t\t\t\tdesiredValue);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tdesiredValues.forEach(desiredValue => {\n\t\t\t\t\t\tconst found = this._obj.some(obj => {\n\t\t\t\t\t\t\tnew Assertion(obj.constuctor in validTypes);\n\t\t\t\t\t\t\treturn Array.isArray(obj[key]) && obj[key].indexOf(desiredValue) > -1;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.assert(\n\t\t\t\t\t\t\tfound,\n\t\t\t\t\t\t\t'expected #{this} to have Siren ' + key + ' #{exp}',\n\t\t\t\t\t\t\t'expected #{this} to not have Siren ' + key + ' #{exp}',\n\t\t\t\t\t\t\tdesiredValue);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnew Assertion(this._obj.constuctor in validTypes);\n\t\t\t\tdesiredValues.forEach(desiredValue => {\n\t\t\t\t\tthis.assert(\n\t\t\t\t\t\tArray.isArray(this._obj[key]) && this._obj[key].indexOf(desiredValue) > -1,\n\t\t\t\t\t\t'expected #{this} to have Siren ' + key + ' #{exp}',\n\t\t\t\t\t\t'expected #{this} to not have Siren ' + key + ' #{exp}',\n\t\t\t\t\t\tdesiredValue);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\tmultipleArgMethod('classes', 'class', [Action, Entity, Field, Link]);\n\tmultipleArgMethod('rels', 'rel', [Entity, Link]);\n\n\t// expect(resource).to.have.X(x)\n\tfunction singleArgMethod(name, key, validTypes) {\n\t\tAssertion.addChainableMethod(name, /* @this */ function(desiredValue) {\n\t\t\tif (Array.isArray(this._obj)) {\n\t\t\t\tif (utils.flag(this, 'all')) {\n\t\t\t\t\tthis._obj.forEach(obj => {\n\t\t\t\t\t\tnew Assertion(obj.constuctor in validTypes);\n\t\t\t\t\t\tthis.assert(\n\t\t\t\t\t\t\tobj[key] === desiredValue,\n\t\t\t\t\t\t\t'expected #{this} to have Siren ' + key + ' #{exp}',\n\t\t\t\t\t\t\t'expected #{this} to not have Siren ' + key + ' #{exp}',\n\t\t\t\t\t\t\tdesiredValue);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tconst found = this._obj.some(obj => {\n\t\t\t\t\t\tnew Assertion(obj.constuctor in validTypes);\n\t\t\t\t\t\treturn desiredValue === obj[key];\n\t\t\t\t\t});\n\t\t\t\t\tthis.assert(\n\t\t\t\t\t\tfound,\n\t\t\t\t\t\t'expected #{this} to have Siren ' + key + ' #{exp}',\n\t\t\t\t\t\t'expected #{this} to not have Siren ' + key + ' #{exp}',\n\t\t\t\t\t\tdesiredValue);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnew Assertion(this._obj.constuctor in validTypes);\n\t\t\t\tthis.assert(\n\t\t\t\t\tdesiredValue === this._obj[key],\n\t\t\t\t\t'expected #{this} to have Siren ' + key + ' #{exp}',\n\t\t\t\t\t'expected #{this} to not have Siren ' + key + ' #{exp}',\n\t\t\t\t\tdesiredValue);\n\t\t\t}\n\t\t});\n\t}\n\tsingleArgMethod('href', 'href', [Action, Link]);\n\tsingleArgMethod('name', 'name', [Action, Field]);\n\tsingleArgMethod('method', 'method', [Action]);\n\tsingleArgMethod('title', 'title', [Action, Entity, Field, Link]);\n\tsingleArgMethod('type', 'type', [Action, Field, Link]);\n\tsingleArgMethod('value', 'value', [Field]);\n\n\t// expect(resource).to.have.X, where X is an Array\n\t// changes the subject of the assertion to be X\n\tfunction arrayProperty(name, key, subjectType) {\n\t\tAssertion.addProperty(name, /* @this */ function() {\n\t\t\tnew Assertion(this._obj).to.be.an.instanceof(subjectType);\n\t\t\tthis.assert(\n\t\t\t\tArray.isArray(this._obj[key]),\n\t\t\t\t'expected #{this} to have Siren ' + key,\n\t\t\t\t'expected #{this} to not have Siren ' + key);\n\t\t\tutils.flag(this, 'object', this._obj[key]);\n\t\t});\n\t}\n\tarrayProperty('sirenAction', 'actions', Entity);\n\tarrayProperty('sirenActions', 'actions', Entity);\n\tarrayProperty('sirenEntity', 'entities', Entity);\n\tarrayProperty('sirenEntities', 'entities', Entity);\n\tarrayProperty('sirenField', 'fields', Action);\n\tarrayProperty('sirenFields', 'fields', Action);\n\tarrayProperty('sirenLink', 'links', Entity);\n\tarrayProperty('sirenLinks', 'links', Entity);\n\n\t// expect(resource).to.have.X, where X is an object\n\t// changes the subject of the assertion to be X\n\tfunction objectProperty(name, key, subjectType) {\n\t\tAssertion.addProperty(name, /* @this */ function() {\n\t\t\tnew Assertion(this._obj).to.be.an.instanceof(subjectType);\n\t\t\tthis.assert(\n\t\t\t\t'object' === typeof this._obj[key],\n\t\t\t\t'expected #{this} to have Siren ' + key,\n\t\t\t\t'expected #{this} to not have Siren ' + key);\n\t\t\tutils.flag(this, 'object', this._obj[key]);\n\t\t});\n\t}\n\tobjectProperty('sirenProperty', 'properties', Entity);\n\tobjectProperty('sirenProperties', 'properties', Entity);\n}\n"],"file":"chaiPlugin.js"}